apply plugin: 'maven-publish'
apply plugin: 'signing'

def prepareEnvironment() {
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.key"] = System.getenv('SIGNING_KEY')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
}

def static getVersionFromGitTag() {
    return 'git describe --abbrev=0 --tags'.execute().text.trim()
}

publishing {
    prepareEnvironment()
    repositories {
        maven {
            name = 'mavenCentral'
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = findProperty("ossrhUsername") ?: ""
                password = findProperty("ossrhPassword") ?: ""
            }
        }
    }
    afterEvaluate {
        publications {
            release(MavenPublication) {
                from components.release

                pom {
                    group = 'com.parsely'
                    name = 'parsely'
                    version = getVersionFromGitTag()

                    description = 'The official Parse.ly Android toolkit'
                    url = 'https://github.com/Parsely/parsely-android'
                    licenses {
                        license {
                            name = 'Apache-2.0'
                            url = 'https://github.com/Parsely/parsely-android/blob/master/COPYING'
                        }
                    }

                    scm {
                        connection = 'scm:git:github.com/Parsely/parsely-android.git'
                        developerConnection = 'scm:git:ssh://github.com/Parsely/parsely-android.git'
                        url = 'https://github.com/Parsely/parsely-android/tree/main'
                    }
                
                    organization {
                        name = 'Parse.ly'
                        url = 'https://www.parse.ly/'
                    }
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
            findProperty("signing.keyId") ?: "",
            findProperty("signing.key") ?: "",
            findProperty("signing.password") ?: "",
    )
    sign publishing.publications
}
