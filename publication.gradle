apply plugin: 'maven-publish'
apply plugin: 'signing'

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

def prepareEnvironment() {
    if (System.getenv("CI")) {
        ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
        ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
        ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
        ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
        ext["signing.key"] = System.getenv('SIGNING_KEY')
    } else {
        // Read local.properties
        File secretPropsFile = project.rootProject.file('local.properties')
        Properties p = new Properties()
        new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
        p.each { name, value ->
            rootProject.ext[name] = value
        }
    }
}

publishing {
    prepareEnvironment()
    repositories {
        maven {
            name = 'mavenCentral'
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
    afterEvaluate {
        publications {
            release(MavenPublication) {
                from components.release

                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = 'The official Parse.ly Android toolkit'
                    url = 'https://github.com/Parsely/parsely-android'
                    licenses {
                        license {
                            name = 'Apache-2.0'
                            url = 'https://github.com/Parsely/parsely-android/blob/master/COPYING'
                        }
                    }

                    scm {
                        connection = 'scm:git:github.com/Parsely/parsely-android.git'
                        developerConnection = 'scm:git:ssh://github.com/Parsely/parsely-android.git'
                        url = 'https://github.com/Parsely/parsely-android/tree/main'
                    }
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
            rootProject.ext["signing.keyId"],
            rootProject.ext["signing.key"],
            rootProject.ext["signing.password"],
    )
    sign publishing.publications
}
